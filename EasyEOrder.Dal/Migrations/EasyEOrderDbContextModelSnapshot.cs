// <auto-generated />
using System;
using EasyEOrder.Dal.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EasyEOrder.Dal.Migrations
{
    [DbContext(typeof(EasyEOrderDbContext))]
    partial class EasyEOrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentContent");

                    b.Property<Guid>("FoodId");

                    b.Property<string>("MyUserId");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MyUserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe841"),
                            CommentContent = "HejHejHej",
                            FoodId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe123"),
                            MyUserId = "test1"
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.DayOfWeekOpenTimes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOfWeek");

                    b.Property<Guid?>("OpenTimesId");

                    b.Property<Guid>("RestaurantId");

                    b.HasKey("Id");

                    b.HasIndex("OpenTimesId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DayOfWeekOpenTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe855"),
                            DayOfWeek = 0,
                            RestaurantId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe843")
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseInfo");

                    b.Property<int>("Category");

                    b.Property<bool>("IsAvailable");

                    b.Property<Guid>("MenuId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OrderId");

                    b.Property<int>("Price");

                    b.Property<int>("Rating");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe123"),
                            BaseInfo = "BaseInfo",
                            Category = 1,
                            IsAvailable = true,
                            MenuId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe844"),
                            Name = "FoodTest",
                            Price = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.FoodAllergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Allergen");

                    b.Property<Guid>("FoodId");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAllergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe853"),
                            Allergen = 0,
                            FoodId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe123")
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RestaurantId");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe844"),
                            RestaurantId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe843")
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Picture");

                    b.Property<Guid?>("ReservationId");

                    b.Property<Guid?>("RestaurantId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "test1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db2dbce5-e355-4774-b34e-825bc5ef355e",
                            Email = "test@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEPt+CTDNRJ2Fw1zoLhPkz94HtGiCiFWV0IUEB6YzyKpyGwbRcxtrzSuuJI8xnzigBA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "test"
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.OpenTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("From");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.ToTable("OpenTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe863"),
                            From = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid>("ReservationId");

                    b.Property<int>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe851"),
                            Comment = "OrderComment",
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe849"),
                            TotalPrice = 2000
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("From");

                    b.Property<Guid>("TableId");

                    b.Property<DateTime>("To");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe849"),
                            From = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe847"),
                            To = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "test1"
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<Guid?>("MenuId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe843"),
                            Address = "Adress",
                            Email = "email@email.email",
                            MenuId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe844"),
                            Name = "RestauranName"
                        });
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MyUserId");

                    b.Property<Guid>("ReservationId");

                    b.Property<Guid>("RestaurantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe1ee058-9e79-4544-bf93-026f477fe847"),
                            ReservationId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe848"),
                            RestaurantId = new Guid("fe1ee058-9e79-4544-bf93-026f477fe843"),
                            UserId = "test1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Comment", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Food")
                        .WithMany("Comments")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyEOrder.Dal.Entities.MyUser")
                        .WithMany("Comments")
                        .HasForeignKey("MyUserId");
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.DayOfWeekOpenTimes", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.OpenTime", "OpenTimes")
                        .WithMany()
                        .HasForeignKey("OpenTimesId");

                    b.HasOne("EasyEOrder.Dal.Entities.Restaurant")
                        .WithMany("DayOfWeekOpenTimes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Food", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Menu")
                        .WithMany("Foods")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyEOrder.Dal.Entities.Order")
                        .WithMany("Foods")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.FoodAllergen", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Food")
                        .WithMany("FoodAllergens")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Menu", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Restaurant", "Restaurant")
                        .WithOne("Menu")
                        .HasForeignKey("EasyEOrder.Dal.Entities.Menu", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.MyUser", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.HasOne("EasyEOrder.Dal.Entities.Restaurant")
                        .WithMany("Employees")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Order", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Reservation")
                        .WithMany("Orders")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Reservation", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.Table", "Table")
                        .WithOne("Reservation")
                        .HasForeignKey("EasyEOrder.Dal.Entities.Reservation", "TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEOrder.Dal.Entities.Table", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.MyUser")
                        .WithMany("Tables")
                        .HasForeignKey("MyUserId");

                    b.HasOne("EasyEOrder.Dal.Entities.Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyEOrder.Dal.Entities.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EasyEOrder.Dal.Entities.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
